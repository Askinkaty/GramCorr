# vim:ft=bash

[ -e .local ] && source .local
INPUT=${INPUT:-"./input"}
INPUT_RAW=${INPUT_RAW:-"${INPUT}/00_raw"}               # raw files (copies - if applicable)
INPUT_PREPROC=${INPUT_PREPROC:-"${INPUT}/01_preproc"}   # preprocessed: sanitised 
INPUT_FEATURE=${INPUT_FEATURE:-"${INPUT}/10_feature"}   # ready to use
INPUT_EXPERIMENT=${INPUT_EXPERIMENT:-"${INPUT}/20_experiment"}
OUTPUT=${OUTPUT:-"./output"}
OUTPUT_EXPERIMENT=${OUTPUT_EXPERIMENT:-"${OUTPUT}/experiment"}

WEKA_BASE=${WEKA_BASE:-"external/weka/"}
WEKA_CMD="java -Xmx2g -classpath ${WEKA_BASE}/weka.jar"

#
# These 'functions' are external to the main script for convenience (testing):
# Use: `source $0` in your current (bash) shell and the functions will be available.
#

# Copy original file from I: and gently sanitise data.
preprocess_file() {
    set -e
    set -o pipefail

    if [ $# -ne 2 ]
    then
        echo "Usage: ${FUNCNAME[0]} INFILE OUTFILE" >&2
        echo "Copy and sanitise (I:/.../)FILE.csv to FILE.csv" >&2
        return 1
    fi

    local INFILE="$1"
    local OUTFILE="$2"
    if [ "${INFILE}" -nt "${OUTFILE}" ] 
    then
        sed -e 's/Un\t/Unknown\t/' \
        < "${INFILE}" \
        | sed -e 's#\\##g' \
        > "$OUTFILE"
    else
        echo "[${FUNCNAME[0]}] Doing nothing for ${INFILE}." >&2
    fi
}

# Convert .csv files to .arff files (for WEKA).
csv2arff() {
    if [ $# -lt 2 ]
    then
        echo "Usage: ${FUNCNAME[0]} FILE.csv OUTFILE.arff [CSVLOADER_EXTRA_ARGS]" >&2
        echo "Convert FILE.csv to FILE.arff" >&2
        return 1
    fi

    # Set the default to work with a set of 5 Guessers
    if [ $# -eq 2 ]
    then
        local CSVLOADER_EXTRA_ARGS=( \
            -N "6,8,10,12,14" \
            -L "6,8,10,12,14:-1,0,1" \
            -R "7,9,11,13,15" \
        )
    else
        local CSVLOADER_EXTRA_ARGS=( "${@:3}" )
    fi

    # Load csv file & convert to arff
    # -F <separator>:   The field separator to be used
    # -E <enclosures>:  The enclosure character(s) to use for strings
    #       FIXME: why can't this be -E ''
    # -M <str>:         The string representing a missing value
    # -S Strings
    # -R Numerics
    # -N Nominals
    # -L <nominal label spec>: 
    #       1,2,4-6:red,green,blue or att1,att2:red,green,blue
    # -B <num>:         The size of the in memory buffer (in rows).
    local INFILE="$1"
    local OUTFILE="$2"
    if [ "${INFILE}" -nt "${OUTFILE}" ] 
    then
        echo "[${FUNCNAME[0]}] ${INFILE} ---> ${OUTFILE}" >&2

        # Weka seems to be exiting with 0 - even in case of failure :(
        # but there is (usually) output on stderr. So, check for output there...
        local ERRLOG=$(mktemp)
        ${WEKA_CMD} weka.core.converters.CSVLoader "$INFILE" \
                -F '\t' -E '#' -M '?' \
                -S 1,2,4, \
                -R 3 \
                -N 5 \
                -L "5:0,1" \
                "${CSVLOADER_EXTRA_ARGS[@]}" \
                -B 1 \
        2> >(tee -a ${ERRLOG} >&2) \
        | \
        # Filter unused 'columns' from file AND put GOLD column last
        # FIXME: The awk is a hack to make sure weka attributes 'numeric' values to our numeric values.
        #        It might be, that a '?' in the very first line overwrites the -R option from above! 
        ${WEKA_CMD} weka.filters.unsupervised.attribute.Reorder \
                -R 1,3,6-last,5 \
        2> >(tee -a ${ERRLOG} >&2) \
        | awk '{ if ( $1 ~ /@attribute/ && $2 ~ /conf_|std_|maxabs_|_score/ ) { print $1,$2,"numeric" } else { print } }' \
        > "$OUTFILE"
        if [[ -s "$ERRLOG" ]]; then
            echo "FAIL: $ERRLOG is not empty."
            rm -f $ERRLOG
            return 1
        else
            rm -f $ERRLOG
        fi
    else
        echo "[${FUNCNAME[0]}] Exists." >&2
    fi
}


weka_rf() {
    if [ $# -ne 2 ] && [ $# -ne 3 ]
    then
        echo "Usage: ${FUNCNAME[0]} TRAIN_DATA OUTFILE_BASENAME [TEST_DATA]" >&2
        echo "Use TRAIN_DATA" >&2
        echo "- for train/eval with 10-fold CV and output evaluation OR" >&2
        echo "- use unlabeled TEST_DATA and output predictions" >&2
        return 1
    fi
    local TRAIN_DATA=$1
    local OUTFILE=$2
    local TEST_DATA=$3

    local RUN_WEKA="${WEKA_CMD} \
        weka.classifiers.meta.FilteredClassifier \
        -t ${TRAIN_DATA} \
        \"\${WEKA_OPTS[@]}\" \
        -F weka.filters.unsupervised.attribute.RemoveType \
        -W weka.classifiers.trees.RandomForest \
        -- -P 100 -I 100 -K 0 -M 1.0 -V 0.001 -S 1 -num-slots 3"

    local PREDS_OUTFILE="$OUTFILE.pred"
    local EVAL_OUTFILE="$OUTFILE.eval"
    # local MODEL_OUTFILE="$OUTFILE.model"
    # -d ${MODEL_OUTFILE}

    local WEKA_OPTS=""
    if [ -n "$TEST_DATA" ]
    then
        echo "Creating $PREDS_OUTFILE"
        WEKA_OPTS=( "-T" "${TEST_DATA}" )
        eval "${RUN_WEKA}" > "${EVAL_OUTFILE}"

        WEKA_OPTS+=( \
            "-classifications" \
            "weka.classifiers.evaluation.output.prediction.CSV -p 1 -file ${PREDS_OUTFILE} -suppress" )
        EVAL_OUTFILE=/dev/null
        eval "${RUN_WEKA}" > "${EVAL_OUTFILE}"
    else
        echo "Creating $EVAL_OUTFILE"
        WEKA_OPTS=( -v -o -s 1 -x 10 )
        eval "${RUN_WEKA}" > "${EVAL_OUTFILE}"
    fi
}
